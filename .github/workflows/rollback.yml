name: Rollback Blue-Green

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - staging
          - prod

jobs:
  rollback:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup kubectl
        shell: bash
        env:
          AKS_KUBECONFIG_B64: ${{ secrets.AKS_KUBECONFIG }}
        run: |
          python - <<'PY'
          import os, base64, re, sys
          b64 = os.environ['AKS_KUBECONFIG_B64']
          b64 = re.sub(r'\s+', '', b64).replace('\r','')
          try:
            data = base64.b64decode(b64, validate=True)
          except Exception as e:
            sys.stderr.write(f"Invalid base64 in AKS_KUBECONFIG: {e}\n")
            sys.exit(1)
          open('kubeconfig','wb').write(data)
          PY
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
          kubectl version --client
      
      - name: Get current and previous colors
        id: colors
        run: |
          ENV="${{ inputs.environment }}"
          CURRENT=$(kubectl -n $ENV get svc backend-svc -o jsonpath="{.spec.selector.color}")
          PREVIOUS=$([[ "$CURRENT" == "blue" ]] && echo "green" || echo "blue")
          
          echo "current=$CURRENT" >> $GITHUB_OUTPUT
          echo "previous=$PREVIOUS" >> $GITHUB_OUTPUT
          
          echo "=== ROLLBACK INFO ==="
          echo "Environment: $ENV"
          echo "Current: $CURRENT"
          echo "Will rollback to: $PREVIOUS"
      
      - name: Verify previous version is running
        run: |
          ENV="${{ inputs.environment }}"
          PREVIOUS="${{ steps.colors.outputs.previous }}"
          
          REPLICAS=$(kubectl -n $ENV get deploy backend-$PREVIOUS -o jsonpath="{.spec.replicas}")
          
          if [ "$REPLICAS" -eq 0 ]; then
            echo "‚ùå Previous version (backend-$PREVIOUS) has 0 replicas!"
            echo "Scaling it up first..."
            kubectl -n $ENV scale deploy/backend-$PREVIOUS --replicas=2
            kubectl -n $ENV rollout status deploy/backend-$PREVIOUS --timeout=120s
          fi
          
          echo "‚úÖ Previous version is ready"
      
      - name: Perform rollback
        run: |
          ENV="${{ inputs.environment }}"
          PREVIOUS="${{ steps.colors.outputs.previous }}"
          CURRENT="${{ steps.colors.outputs.current }}"
          
          echo "üîÑ Rolling back from $CURRENT to $PREVIOUS in $ENV"
          bash k8s/scripts/switch_color.sh $ENV $PREVIOUS
          
          echo "‚úÖ Rollback complete!"
          
      - name: Show result
        run: |
          ENV="${{ inputs.environment }}"
          
          echo "=== ROLLBACK RESULT ==="
          echo "Active color now:"
          kubectl -n $ENV get svc backend-svc -o jsonpath="{.spec.selector.color}"
          echo ""
          echo ""
          echo "Backend deployments:"
          kubectl -n $ENV get deploy -l app=backend
          echo ""
          echo "Pods:"
          kubectl -n $ENV get pods -l app=backend
