name: Monitoring - kube-prometheus-stack

on:
  push:
    branches: ["testing", "main"]
  workflow_dispatch: {}

jobs:
  check_deployment:
    runs-on: ubuntu-latest
    outputs:
      deploy_success: ${{ steps.check.outputs.success }}
    steps:
      - name: Check if deployment exists
        id: check
        run: |
          echo "success=true" >> $GITHUB_OUTPUT

  setup_monitoring:
    needs: [check_deployment]
    if: needs.check_deployment.outputs.deploy_success == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        shell: bash
        env:
          AKS_KUBECONFIG_B64: ${{ secrets.AKS_KUBECONFIG }}
        run: |
          python - <<'PY'
          import os, base64, re, sys
          b64 = os.environ.get('AKS_KUBECONFIG_B64','')
          if not b64:
            sys.stderr.write("AKS_KUBECONFIG_B64 is empty\n")
            sys.exit(1)
          b64 = re.sub(r'\s+', '', b64).replace('\r','')
          try:
            data = base64.b64decode(b64, validate=True)
          except Exception as e:
            sys.stderr.write(f"Invalid base64 for kubeconfig: {e}\n")
            sys.exit(1)
          open('kubeconfig','wb').write(data)
          PY
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
          kubectl version --client

      - name: Check if monitoring already installed
        id: check_monitoring
        run: |
          if helm list -n monitoring | grep -q monitor; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Monitoring stack already installed"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Monitoring stack not found, will install"
          fi

      - name: Install Helm
        if: steps.check_monitoring.outputs.exists == 'false'
        uses: azure/setup-helm@v4

      - name: Add repos
        if: steps.check_monitoring.outputs.exists == 'false'
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Create monitoring namespace
        run: kubectl create ns monitoring --dry-run=client -o yaml | kubectl apply -f -

      - name: Install kube-prometheus-stack
        if: steps.check_monitoring.outputs.exists == 'false'
        run: |
          helm upgrade --install monitor prometheus-community/kube-prometheus-stack \
            -n monitoring \
            -f k8s/prometheus/values-kube-prom.yaml \
            --wait \
            --timeout 10m

      - name: Wait for monitoring stack
        run: |
          echo "Waiting for Prometheus Operator..."
          kubectl -n monitoring wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus-operator --timeout=300s || true
          
          echo "Waiting for Grafana..."
          kubectl -n monitoring wait --for=condition=ready pod -l app.kubernetes.io/name=grafana --timeout=300s || true
          
          echo "Waiting for Prometheus..."
          kubectl -n monitoring wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus --timeout=300s || true

      - name: Apply metrics Service + ServiceMonitors
        run: |
          kubectl apply -f k8s/metrics/backend-metrics-service.yaml
          kubectl apply -f k8s/prometheus/backend-servicemonitor-staging.yaml
          kubectl apply -f k8s/prometheus/backend-servicemonitor-prod.yaml

      - name: Verify ServiceMonitors
        run: |
          echo "=== ServiceMonitors in staging ==="
          kubectl -n staging get servicemonitor || echo "No ServiceMonitors found in staging"
          echo ""
          echo "=== ServiceMonitors in prod ==="
          kubectl -n prod get servicemonitor || echo "No ServiceMonitors found in prod"
          echo ""
          echo "=== All monitoring pods ==="
          kubectl -n monitoring get pods

      - name: Show Grafana access info
        run: |
          echo "=== Waiting for Grafana LoadBalancer IP ==="
          for i in {1..60}; do
            IP=$(kubectl -n monitoring get svc monitor-grafana -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            HN=$(kubectl -n monitoring get svc monitor-grafana -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            if [ -n "$IP" ] || [ -n "$HN" ]; then
              echo "=========================================="
              echo "Grafana is ready!"
              echo "URL: http://$IP$HN"
              echo "Username: admin"
              echo "Password: admin123"
              echo "=========================================="
              echo ""
              echo "To access Prometheus:"
              echo "kubectl -n monitoring port-forward svc/monitor-kube-prometheus-prometheus 9090:9090"
              echo "Then visit: http://localhost:9090"
              echo ""
              echo "Prometheus Queries to Try:"
              echo "- sum(rate(http_requests_total[5m])) by (color)"
              echo "- active_connections"
              echo "- rate(news_api_calls_total[5m])"
              exit 0
            fi
            echo "Waiting for LoadBalancer... attempt $i/60"
            sleep 10
          done
          echo "Grafana service is running but LoadBalancer IP not assigned yet"
          kubectl -n monitoring get svc monitor-grafana