name: CD - Staging and Production

on:
  push:
    branches: ["testing", "main"]
  workflow_dispatch: {}

env:
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    needs: []
    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        shell: bash
        env:
          AKS_KUBECONFIG_B64: ${{ secrets.AKS_KUBECONFIG }}
        run: |
          python - <<'PY'
          import os, base64, re, sys
          b64 = os.environ['AKS_KUBECONFIG_B64']
          b64 = re.sub(r'\s+', '', b64).replace('\r','')
          try:
            data = base64.b64decode(b64, validate=True)
          except Exception as e:
            sys.stderr.write(f"Invalid base64 in AKS_KUBECONFIG: {e}\n")
            sys.exit(1)
          open('kubeconfig','wb').write(data)
          PY
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
          kubectl version --client

      - name: Render manifests with image tags
        run: |
          sed -i "s#REPLACE_ACR#${{ secrets.ACR_LOGIN_SERVER }}#g" k8s/backend-deploy-blue.yaml k8s/backend-deploy-green.yaml k8s/frontend-deploy.yaml
          sed -i "s#REPLACE_TAG#${{ env.IMAGE_TAG }}#g"           k8s/backend-deploy-blue.yaml k8s/backend-deploy-green.yaml k8s/frontend-deploy.yaml

      - name: Create namespaces
        run: |
          kubectl apply -f k8s/namespace-staging.yaml
          kubectl apply -f k8s/namespace-prod.yaml

      - name: ConfigMaps
        run: kubectl apply -f k8s/backend-config.yaml

      - name: Secrets
        run: |
          kubectl -n staging create secret generic newsapi-secret --from-literal=NEWSAPI_KEY="${{ secrets.NEWSAPI_KEY }}" --dry-run=client -o yaml | kubectl apply -f -
          kubectl -n prod    create secret generic newsapi-secret --from-literal=NEWSAPI_KEY="${{ secrets.NEWSAPI_KEY }}" --dry-run=client -o yaml | kubectl apply -f -
          kubectl -n staging create secret generic azure-storage-secret \
            --from-literal=azurestorageaccountname="${{ secrets.STORAGE_ACCOUNT_NAME }}" \
            --from-literal=azurestorageaccountkey="${{ secrets.STORAGE_ACCOUNT_KEY }}" \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl -n prod create secret generic azure-storage-secret \
            --from-literal=azurestorageaccountname="${{ secrets.STORAGE_ACCOUNT_NAME }}" \
            --from-literal=azurestorageaccountkey="${{ secrets.STORAGE_ACCOUNT_KEY }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Storage PV and PVC
        run: kubectl apply -f k8s/storage-azurefile.yaml

      - name: Deploy backends (blue & green)
        run: |
          kubectl apply -f k8s/backend-deploy-blue.yaml
          kubectl apply -f k8s/backend-deploy-green.yaml

      - name: Service and HPA
        run: |
          kubectl apply -f k8s/backend-service.yaml
          kubectl apply -f k8s/backend-hpa.yaml

      - name: Frontend
        run: kubectl apply -f k8s/frontend-deploy.yaml

      - name: Wait for PVC to bind
        run: |
          echo "Waiting for PVCs to bind..."
          kubectl wait --for=jsonpath='{.status.phase}'=Bound pvc/azurefile-pvc -n staging --timeout=120s || true
          kubectl wait --for=jsonpath='{.status.phase}'=Bound pvc/azurefile-pvc -n prod --timeout=120s || true

      - name: Quick diagnostics for staging backend-blue
        shell: bash
        run: |
          echo "=== Checking staging backend-blue deployment ==="
          kubectl -n staging get deploy backend-blue -o wide
          kubectl -n staging get pods -l app=backend,color=blue -o wide
          echo ""
          echo "=== Recent events in staging ==="
          kubectl -n staging get events --sort-by=.lastTimestamp | tail -n 30
          echo ""
          echo "=== Describing pods ==="
          for p in $(kubectl -n staging get pods -l app=backend,color=blue -o name 2>/dev/null); do
            echo "---- $p ----"
            kubectl -n staging describe $p | head -n 100
            echo "---- LOGS $p ----"
            kubectl -n staging logs $p --tail=50 || echo "No logs yet"
            echo ""
          done

      - name: Rollout backend-blue staging with extended timeout
        shell: bash
        run: |
          set +e
          kubectl -n staging rollout status deploy/backend-blue --timeout=600s
          RC=$?
          if [ $RC -ne 0 ]; then
            echo "❌ Rollout failed. Final diagnostics..."
            kubectl -n staging get pods -l app=backend,color=blue -o wide
            kubectl -n staging describe deploy backend-blue
            for p in $(kubectl -n staging get pods -l app=backend,color=blue -o name); do
              echo "==== FINAL LOGS $p ===="
              kubectl -n staging logs $p --tail=200 || true
            done
            exit 1
          fi
          echo "✅ backend-blue staging rolled out successfully"

      - name: Set color and wait
        run: |
          bash k8s/scripts/switch_color.sh staging blue
          kubectl -n staging rollout status deploy/frontend --timeout=300s

          if [ "${{ github.ref_name }}" = "main" ]; then
            bash k8s/scripts/switch_color.sh prod green
            kubectl -n prod rollout status deploy/backend-green --timeout=600s
          else
            bash k8s/scripts/switch_color.sh prod blue
            kubectl -n prod rollout status deploy/backend-blue --timeout=600s
          fi
          kubectl -n prod rollout status deploy/frontend --timeout=300s

      - name: Show External IPs
        run: |
          echo "STAGING FRONTEND:"; kubectl -n staging get svc frontend-svc -o wide || true
          echo "PROD FRONTEND:";    kubectl -n prod    get svc frontend-svc -o wide || true 